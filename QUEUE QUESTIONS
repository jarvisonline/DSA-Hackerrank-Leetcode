Question 622 leetcode
class MyCircularQueue:
    def __init__(self, k: int):
        self.capacity = k
        self.front = 0
        self.rear = -1
        self.size = 0
        self.queue = [-1] * k

    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        self.rear = (self.rear + 1) % self.capacity
        self.queue[self.rear] = value
        self.size += 1
        return True

    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        self.front = (self.front + 1) % self.capacity
        self.size -= 1
        return True

    def Front(self) -> int:
        return self.queue[self.front] if not self.isEmpty() else -1

    def Rear(self) -> int:
        return self.queue[self.rear] if not self.isEmpty() else -1

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.capacity
Question 232 leetcode

class MyQueue:
    def __init__(self):
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append(x)

    def pop(self) -> int:
        temp_stack = []
        while self.stack:
            temp_stack.append(self.stack.pop())
        first_element = temp_stack.pop()
        while temp_stack:
            self.stack.append(temp_stack.pop())
        return first_element

    def peek(self) -> int:
        temp_stack = []
        while self.stack:
            temp_stack.append(self.stack.pop())
        first_element = temp_stack[-1]
        while temp_stack:
            self.stack.append(temp_stack.pop())
        return first_element

    def empty(self) -> bool:
        return not self.stack
