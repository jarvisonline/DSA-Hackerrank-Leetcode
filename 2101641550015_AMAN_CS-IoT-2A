#include<stdio.h>
#include<stdlib.h>
typedef struct nodetype
{
	int info;
	struct nodetype *next;
}node;

void insertbeg(node**start,int item)
{
	node *ptr;
	ptr=(node*)malloc(sizeof(node));
	ptr->info=item;
	ptr->next=*start;
	*start=ptr;
}

void insertatend(node**start,int item)
{
	node *ptr,*last;
	ptr=(node*)malloc(sizeof(node));
	ptr->info=item;
	ptr->next=NULL;
	if(*start==NULL)
		*start=ptr;
	else
	{
		last=*start;
		while(last->next!=NULL)
			last=last->next;
		last->next=ptr;
	}
}
void display(node*start)
{
	if(start==NULL)
	{
		printf("\n LL IS EMPTY");
		return;
	}
	while(start!=NULL)
	{
		printf("%d->",start->info);
		start=start->next;
	}
}

void deleteatbeg(node**start)
{
	node *ptr;
	if(*start==NULL)
	{
		printf("\n LL IS EMPTY");
		return ;
	}
	ptr=*start;
	*start=ptr->next;
	printf("\n delete value=%d",ptr->info);
	free(ptr);
}

void deleteatend(node**start)
{
	node *ptr,*last;
	if(*start==NULL)
	{
		printf("\n LL IS EMPTY");
		return ;
	}
	if((*start)->next==NULL)
	{
		ptr=*start;
		*start=ptr->next;
	}
	else
	{
		last=*start;
		while(last->next->next!=NULL)
			last=last->next;
		last->next=NULL;
	}
	printf("\n delete value=%d",ptr->info);
	free(ptr);
}

node *search(node*start,int key)
{
	while(start!=NULL&&start->info!=key)
		start=start->next;
	return start;
}

void displayinrev(node*start)
{
	if(start->next!=NULL)
		displayinrev(start->next);
	printf("%d->",start->info);
}

int main()
{
	int item,choice;
	node *head;
	head=NULL;
	while(1)
	{
		printf("\n Linked List Menu");
		printf("\n 1.Insert At Beg");
		printf("\n 2.Insert At End");
		printf("\n 3.Delete At Beg");
		printf("\n 4.Delete At End");
		printf("\n 5.Display In Order");
		printf("\n 6.Display In Reverse");
		printf("\n 7.Exit");
		printf("\n Enter your choice");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:
				printf("\n Enter item=");
				scanf("%d",&item);
				insertbeg(&head,item);
				break;
			case 2:
				printf("\n Enter item");
				scanf("%d",&item);
				insertatend(&head,item);
				break;
			case 3:
				deleteatbeg(&head);
				break;
			case 4:
				deleteatend(&head);
				break;
			case 5:
				display(head);
				break;
			case 6:
				displayinrev(head);
				break;
				
			default:exit(1);
		}
	}
}
			
		
		
		
